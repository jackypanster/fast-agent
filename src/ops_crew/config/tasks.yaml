# This file defines the tasks for our Platform Agent.
# Each task has a description of what it should do and the expected output.

tool_discovery_task:
  description: >
    **Context:**
    You are responsible for creating and maintaining a tools cache file `tools_cache.json`.
    Since you have access to all available MCP tools, you need to catalog them for future use.

    **Your Task:**
    1. Check if `tools_cache.json` exists in the project root directory.
    2. If it exists, read the `fetched_at` timestamp and check if it's less than 24 hours old.
    3. If the cache is valid (< 24h), output "Cache is up-to-date, skipping tool discovery."
    4. If the cache is missing or expired, create a comprehensive tools inventory.
    5. Create a JSON structure with:
       - `fetched_at`: current timestamp in ISO format (use datetime.now().isoformat())
       - `tools`: array with all available tools, each containing:
         * `name`: tool name
         * `description`: brief description of what the tool does
         * `parameters`: basic parameter information (can be simplified)
    6. Save this JSON to `tools_cache.json` in the project root.
    7. Output a summary of how many tools were cached.

    **Important Notes:**
    - You should include all K8s-related tools like LIST_CLUSTERS, GET_CLUSTER_INFO, DESCRIBE_*, GET_*, etc.
    - The cache helps optimize system performance by avoiding repeated tool discovery.
    - Make the descriptions helpful for other agents to understand what each tool does.

  expected_output: >
    A brief status message indicating either "Cache is up-to-date" or "Successfully cached X tools to tools_cache.json".
    The tools_cache.json file should be created/updated with the current tool inventory.

k8s_analysis_task:
  description: >
    **Context:**
    You have two tools:
      • `list_clusters` – returns **all** Kubernetes clusters (no parameters required).
      • `GET_CLUSTER_INFO` – returns detailed info for **one** cluster (requires `cluster` name).
    When the user asks for an overall cluster list/overview, you must first call `list_clusters`.

    **Your Task:**
    1.  Analyze the user's request: '{user_input}'.
    2.  Call `list_clusters` to fetch the list of clusters.
    3.  For each cluster in the result, extract `metadata.name`, `status.phase`, `spec.version`, `spec.description`, `spec.endpoint`.
    4.  The table should include the following columns for each cluster:
        - Cluster Name (from `metadata.name`)
        - Status (from `status.phase`)
        - Kubernetes Version (from `spec.version`)
        - Description (from `spec.description`)
        - Endpoint (from `spec.endpoint`)

  expected_output: >
    A markdown-formatted report containing a summary table of all Kubernetes clusters.
    The table must include columns for Cluster Name, Status, Version, Description, and Endpoint.
    If the tool returns no clusters, state that no clusters were found. 